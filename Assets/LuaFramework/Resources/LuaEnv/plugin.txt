

require('io')
require('LuaEnv.class')
require('LuaEnv.behaviour')

-- 重写print函数，用以输出trace信息---
local basePrint = print
print = function( ... )
	local ret = debug.traceback('',2)
	local arg = {...}
	arg[#arg+1]=ret
	basePrint(unpack(arg))
end



local function getParent( path )
	if not path then return "" end

	for i = #path,1,-1 do
		if path:sub(i,i) == '.' then
			return path:sub(0,i-1)
		end
	end
	return ""
end

plugins = plugins or {}


local loadPlugFile = function (filename,searchPaths )
	for i = 1,#searchPaths do
		local url = searchPaths[i]..filename
	--	print ('search '..url)
		if LuaPluginUtil.ExistFile(url) then
			local f = loadfile(url)
			return f,url
		end
	end
end


local baseRequire = require

function requireFile(filename,fileEnv,searchPaths,...)
	for i = 1,#searchPaths do
		local path = searchPaths[i]..filename
		if package.loaded[path]~= nil then return package.loaded[path] end
	end

	local f,path = loadPlugFile(filename,searchPaths)
	local originalPath = __path
	
	if f then
		__path = path
		package.loaded[path] = true
		if fileEnv then setfenv(f,fileEnv) end
		local ret = f(...)
		if ret ~= nil then
			package.loaded[path] = ret
		end
		__path = originalPath
		print('require '..path)
		return ret,true
	end
	print ('require system file '..filename)
	local ret = baseRequire(filename)
	__path = originalPath
	return ret,true
end


function createRequireFunc(plug,fileEnv)
	return function (filename)
		local dir = getParent(__path)
		local root = "plug://"..plug.."/"

		local searchPaths = dir and dir~='' and {dir..'.',root,"",
		} or {root,""}

		return requireFile(filename,fileEnv,searchPaths)
	end
end


local function doPlugin(name, onComplete)
	if plugins[name] then 
		--print('already contains a plguin named '..name,2)
		onComplete()
		return
	end
	print('====>start load plugin '..name)
	requireFile('main',nil,{'plug://'..name..'/'})
	if plugins[name] then
		onComplete()
		return
	end

	local co = coroutine.create(function ()
		while not plugins[name] do --until doPlugin completed
			UnityEngine.Yield()
		end
		onComplete()
	end)
	coroutine.resume(co)
end 



plugin = function(table)
	local name = table.name
	if not name then
		error('plugin need a name.',2)
		return
	end

	if plugins[name] then
		error('already contains a plguin named '..name,2)
		return
	end
	local main = table.main
	if not main then
		error('plugin need a main func',2)
		return
	end

	local run = function ( ... )

		--新环境继承原来的全局环境
		local Global = {
			__index = _G,
			require = false,
			use = false,
			_classes = {},
		}
		Global._G = Global
		Global._sys = _G
		Global.Global = Global

		setmetatable(Global,Global)

		

		local env = {
		} --为use定义一个新环境，继承Global,但不允许定义新字段
		env._G = Global
		--新环境不允许直接定义全局变量，只能通过Global.xxx来定义
		env.__newindex = function(_,k,v)
			if Global[k] then
				Global[k] = v
				return
			end
			error('Undefined field in global, name = '..k,2)
		end
		env.__index = Global
		setmetatable(env,env)

		--require函数,等同于use,允许定义全局变量
		Global.require = createRequireFunc(name,Global)

		--use函数,等同于require,但不允许定义全局变量
		Global.use = createRequireFunc(name,env)

		--将main函数设置为在新环境下执行
		setfenv(main,env)

		local _,err = pcall(main)
		if err then
			error(err,3)
		end

		plugins[name] = env
	end

	local dependencies = table.dependencies
	
	--加载所有依赖的plugin.
	local co = coroutine.create(function ( co )
		if dependencies then
			for i ,v in ipairs(dependencies) do
				local done = false
				doPlugin(v,function()
					done = true
					if coroutine.status(co) == 'suspended' then
						coroutine.resume(co)
					end
				end)
				if not done then
					coroutine.yield()
				end
			end
		end
		--执行本插件
		run()
	end)
	coroutine.resume(co,co)
end

  

local function DoAllPlugins()
	local plugins = LuaPluginUtil.GetPluginList()
	local co = coroutine.create(function(co)
		for i = 1,plugins.Length do 
			local name = plugins[i]
			local done = false
			doPlugin(name,function ()
				done = true
				if coroutine.status(co) == 'suspended' then
					coroutine.resume(co)
				end
			end)
			if not done then
				coroutine.yield()
			end
		end
		
	end)
	coroutine.resume(co,co)
end 

DoAllPlugins()

