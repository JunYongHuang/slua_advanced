class 'LCoroutine'
local GameObject = UnityEngine.GameObject
function LCoroutine:ctor(gameObject, name)
	local objName = name or 'LCoroutine'
	local gameObject = gameObject or GameObject(objName)
	self.mono = gameObject:AddComponent(LuaCoroutine)
	self.gameObject = gameObject
end

function LCoroutine:create(func)
	local co 
	local baseEnv = getfenv(func)
	local funcEnv = {
		__index = baseEnv,
		yield = function( instruction )
			self:yield(co,instruction)
		end,
	}
	setmetatable(funcEnv,funcEnv)
	setfenv(func,funcEnv)
	co = coroutine.create(func)
	
	return co
end

local function resumeCo(co)
	coroutine.resume(co)
end

function LCoroutine:yield(co,instruction)
	self.mono:ExecuteWhen(instruction,resumeCo,co)
	coroutine.yield()

end

function LCoroutine:resume(co,...)
	coroutine.resume(co,...)
end

function LCoroutine:clear( )
	self.mono:StopAllCoroutines()
end

function LCoroutine:destroy(isGameObject)
	if isGameObject then
		LuaCoroutine.Destroy(self.gameObject)
	else
		LuaCoroutine.Destroy(self.mono)
	end
end

classend()